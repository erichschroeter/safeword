#ifndef SAFEWORD_H
#define SAFEWORD_H

/*
 * Do not manually modify the VERSION defines; they are auto-generated
 */
#define VERSION_MAJOR @VERSION_MAJOR@
#define VERSION_MINOR @VERSION_MINOR@
#define VERSION_PATCH @VERSION_PATCH@
#define VERSION "@VERSION_MAJOR@.@VERSION_MINOR@.@VERSION_PATCH@"

#include <errno.h>
#include <sqlite3.h>

#define safeword_check(T, ERR, GOTO) if (!(T)) { ret = ERR; goto GOTO; }

#define ESAFEWORD_DBEXIST    ENOENT /* safeword db does not exist */
#define ESAFEWORD_INVARG     256    /* invalid argument */
#define ESAFEWORD_FIELDEXIST 257    /* field does not exist */
#define ESAFEWORD_INTERNAL   258    /* internal to safeword */

char* safeword_strerror(int errnum);

struct safeword_db {
	char    *path;
	sqlite3 *handle;
};

int safeword_init(const char *path);
int safeword_open(struct safeword_db *db, const char *path);
int safeword_close(struct safeword_db *db);
int safeword_config(const char* key, const char* value);
int safeword_credential_add(struct safeword_db *db, int *credential_id,
	const char *username, const char *password, const char *description);
int safeword_credential_remove(struct safeword_db *db, int credential_id);
int safeword_credential_info(struct safeword_db *db, int credential_id);
int safeword_tag_credential(struct safeword_db *db, long int credential_id, const char *tag);
int safeword_tag_info(struct safeword_db *db, const char *tag);
int safeword_tag_update(struct safeword_db *db, const char *tag, const char *wiki);
int safeword_tag_delete(struct safeword_db *db, const char *tag);
int safeword_tag_rename(struct safeword_db *db, const char *old, const char *new);
int safeword_cp_username(struct safeword_db *db, int credential_id, unsigned int ms);
int safeword_cp_password(struct safeword_db *db, int credential_id, unsigned int ms);
int safeword_list_tags(struct safeword_db *db, int credential_id, unsigned int *tags_size, const char ***tags);
int safeword_list_credentials(struct safeword_db *db, unsigned int tags_size, char **tags);

#endif // SAFEWORD_H
